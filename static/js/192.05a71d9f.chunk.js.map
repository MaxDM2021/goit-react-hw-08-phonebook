{"version":3,"file":"static/js/192.05a71d9f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/views/ContactsView.js"],"sourcesContent":["\nimport { useState } from 'react';\nimport './ContactFormStyles.scss';\nimport shortid from 'shortid';\nimport Notiflix from 'notiflix';\n\nimport { addContacts } from '../redux/contacts/contactsOperations';\nimport { getContacts } from '../redux/contacts/contactsReduser';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst startState = {\n  name: '',\n  number: '',\n};\n\nexport default function ContactForm ({onSubmit}) {\n\n  const [{name, number}, setState] = useState(startState);\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n\n  const handleChangeName = e => {\n    setState(prevState => {\n      return { ...prevState, name: e.target.value }});\n    }\n\n\n  const handleChangeNumber = e => {\n    setState(prevState => {\n      return { ...prevState, number: e.target.value }});\n  };\n\n\n  const addCont = (name, number) => {\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.some(contact => contact.name === newContact.name)) {\n      Notiflix.Notify.warning(`❌ ${newContact.name} is already is contacts`, {\n        timeout: 3000,\n      });\n\n      return false;\n    }\n    dispatch(addContacts(newContact));\n\n    return true;\n  };\n\n\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    addCont(name, number);\n    setState({ name: '', number: '' });\n  };\n\n\n\n\n    return (\n      <form className=\"FormEditor\" onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId}>\n          Name:\n          <input\n            className=\"FormEditorName\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChangeName}\n            id={nameInputId}\n            placeholder=\"Name Surname\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={numberInputId}>\n          Number:\n          <input\n            className=\"FormEditorNumber\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChangeNumber}\n            id={numberInputId}\n            placeholder=\"123-45-67\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-  .\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className=\"FormEditor__button\">\n\n          Add contact\n        </button>\n      </form>\n    );\n}\n\n\n\n\n\n// ===== Старая версия на классах =====\n\n\n\n// import React, { Component } from 'react';\n// import './ContactFormStyles.scss';\n// import shortid from 'shortid';\n\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChangeName = e => {\n//     this.setState({ name: e.currentTarget.value });\n//   };\n\n//   handleChangeNumber = e => {\n//     this.setState({ number: e.currentTarget.value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state.name, this.state.number);\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className=\"FormEditor\" onSubmit={this.handleSubmit}>\n//         <label htmlFor={this.nameInputId}>\n//           Name:\n//           <input\n//             className=\"FormEditorName\"\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleChangeName}\n//             id={this.nameInputId}\n//             placeholder=\"Name Surname\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </label>\n//         <label htmlFor={this.numberInputId}>\n//           Number:\n//           <input\n//             className=\"FormEditorNumber\"\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleChangeNumber}\n//             id={this.numberInputId}\n//             placeholder=\"123-45-67\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-  .\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </label>\n\n//         <button type=\"submit\" className=\"FormEditor__button\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;","import React from 'react';\nimport './ContactListStyles.scss';\nimport { deleteContact } from '../redux/contacts/contactsOperations';\nimport { getContacts } from '../redux/contacts/contactsReduser';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from '../redux/filterSlice';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const filterContact = useSelector(getFilterValue);\n\n  const constgetVisibleContacts = () => {\n    if (filterContact === '') {\n      return false;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContact)\n    );\n  };\n\n  const finishContacts = constgetVisibleContacts() ? constgetVisibleContacts() : contacts;\n\n  \n  return (\n    <ul className=\"ContactList\">\n      {finishContacts.map(({ id, name, phone }) => (\n        <li key={id} className=\"ContactList__item\">\n          <p className=\"TodoList__text\">\n            {name}: {phone}\n          </p>\n          <button\n            type=\"button\"\n            className=\"ContactList__btn\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport \"./FilterStyles.scss\";\nimport { filterContact } from \"components/redux/filterSlice\";\nimport { getFilterValue } from '../redux/filterSlice';\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nconst Filter = () => {\n\nconst dispatch = useDispatch();  \nconst filterCont = useSelector(getFilterValue); \n\nfunction filterName(e) {\n    dispatch(filterContact(e.currentTarget.value.trim()))\n} \nreturn (\n    <div className=\"filterBox\">\n    <label>\n     Filter by name:\n     <input className=\"fiterInput\" type=\"text\" value={filterCont} onChange={filterName}/>\n    </label>\n    </div>\n)\n\n}\n\nexport default Filter;","import { useEffect } from 'react';\nimport shortid from 'shortid';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\nimport { addContacts } from '../redux/contacts/contactsOperations';\nimport { getContacts, selectIsLoading, selectError } from '../redux/contacts/contactsReduser';\nimport  Loader  from '../Loader/Loader';\nimport ContactForm from '../ContactForm';\nimport ContactList from '../ContactList';\nimport Filter from '../Filter';\nimport '../App.scss';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const addCont = (name, number) => {\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.some(contact => contact.name === newContact.name)) {\n      Notiflix.Notify.warning(`❌ ${newContact.name} is already is contacts`, {\n        timeout: 3000,\n      });\n\n      return false;\n    }\n    dispatch(addContacts(newContact));\n\n    return true;\n  };\n\n  return (\n    <div className=\"Phonebook\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addCont} />\n      <h2 className=\"TitleContacts\">Contacts</h2>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </div>\n  );\n}"],"names":["startState","name","number","ContactForm","onSubmit","useState","setState","contacts","useSelector","getContacts","dispatch","useDispatch","nameInputId","shortid","numberInputId","className","e","preventDefault","newContact","id","some","contact","Notiflix","timeout","addContacts","addCont","htmlFor","type","value","onChange","prevState","target","placeholder","pattern","title","required","filterContact","getFilterValue","constgetVisibleContacts","filter","toLowerCase","includes","finishContacts","map","phone","onClick","deleteContact","filterCont","currentTarget","trim","ContactsView","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Loader"],"sourceRoot":""}